#!/usr/bin/env bash
# Zero-E Bootstrap Updater (served from Inscyght/zero-e to migrate old installs)
# Intentional, safe migration to sl3yE/zero-e.

# --- BEGIN CONFIG (edit these) ---
version="v1.5-bootstrap"                 # visible to old updaters
NEW_OWNER="sl3yE"
NEW_REPO="Zero-E"
NEW_RAW_URL="https://raw.githubusercontent.com/${NEW_OWNER}/${NEW_REPO}/main/zero-e"
EXPECTED_REPO_ID="783444133"             # numeric repo ID of sl3yE/Zero-E
# --- END CONFIG ---

set -euo pipefail

say() { printf '%s\n' "$*" >&2; }

migration_notice() {
  cat >&2 <<'MSG'
[Zero-E] Migration Notice
────────────────────────
You are seeing this because I changed my Github username to 'sl3yE', which caused the project's URL to change.
Since old versions of z0e check the old URL (Inscyght/zero-e) for updates, 
I made a new account to reclaim and protect my old username (Inscyght) and to keep legacy update URLs working.
This file is a small, intentional bootstrap that:
  1) Verifies the official repository,
  2) Downloads and installs the current Zero-E from its new home, and
  3) Continues running normally.

New canonical repository: https://github.com/sl3yE/zero-e
If you discovered this unexpectedly, you can verify authenticity by visiting the link above.
Thanks for continuing to use Zero-E!
MSG
}

verify_new_repo_identity() {
  local api="https://api.github.com/repos/${NEW_OWNER}/${NEW_REPO}"
  local auth=()
  [ -n "${GITHUB_TOKEN:-}" ] && auth=(-H "Authorization: Bearer ${GITHUB_TOKEN}")

  # Fetch JSON with explicit UA + short timeout; write to a temp file
  local tmpjson http
  tmpjson="$(mktemp)"; trap 'rm -f "$tmpjson"' RETURN
  http=$(curl -fsS -w '%{http_code}' -m 6 -A "zeroe-bootstrap/1.0" "${auth[@]}" -o "$tmpjson" "$api" || true)

  if [ "$http" != "200" ]; then
    say "[Zero-E] Warning: GitHub API returned HTTP $http (rate limit? private? network filter?)."
    say "[Zero-E] Proceeding with post-download validation instead."
    return 0
  fi

  # Extract fields (prefer the FIRST "id" = repo.id)
  local rid full_name owner_login
  rid="$(grep -oE '"id":[[:space:]]*[0-9]+' "$tmpjson" | head -n1 | grep -oE '[0-9]+')"
  full_name="$(sed -nE 's/.*"full_name":[[:space:]]*"([^"]+)".*/\1/p' "$tmpjson" | head -n1)"
  owner_login="$(sed -nE 's/.*"login":[[:space:]]*"([^"]+)".*/\1/p' "$tmpjson" | head -n1)"

  # Prefer strict ID check when available
  if [ -n "$EXPECTED_REPO_ID" ] && [ -n "$rid" ]; then
    if [ "$rid" != "$EXPECTED_REPO_ID" ]; then
      say "[Zero-E] Security check failed: unexpected repository ID."
      say "[Zero-E] Expected: ${EXPECTED_REPO_ID}, Got: ${rid}"
      exit 1
    fi
    return 0
  fi

  # Fall back to names if ID unavailable
  if [ "$full_name" = "${NEW_OWNER}/${NEW_REPO}" ] && [ "$owner_login" = "${NEW_OWNER}" ]; then
    say "[Zero-E] Repo identity verified by owner/full_name (ID unavailable)."
    return 0
  fi

  say "[Zero-E] Security check failed: unable to verify repository identity."
  say "[Zero-E] Got: owner=${owner_login:-<none>} full_name=${full_name:-<none>} id=${rid:-<none>}"
  exit 1
}

install_new_script() {
  # Resolve where this file lives and replace it in-place
  local self="${BASH_SOURCE[0]:-$0}"
  local dir; dir="$(cd "$(dirname "$self")" && pwd -P)"
  local target="${dir}/zero-e"

  # Safety: don’t accidentally fetch ourselves
  if [[ "$NEW_RAW_URL" == *"/Inscyght/zero-e/"* ]]; then
    say "[Zero-E] Misconfiguration: NEW_RAW_URL points to the bootstrap repo. Aborting."
    exit 1
  fi

  local tmp; tmp="$(mktemp)"
  trap 'rm -f "$tmp"' RETURN

  curl -fsSL "$NEW_RAW_URL" -o "$tmp"

  # Sanity fences
  grep -q '^version=' "$tmp" || { say "[Zero-E] Downloaded file missing version= line."; exit 1; }
  head -n1 "$tmp" | grep -qE '^#!' || { say "[Zero-E] Downloaded file missing shebang."; exit 1; }
  # Lightweight heuristic: ensure script references expected repo path somewhere
  grep -Eq 'github\.com/'"$NEW_OWNER"'/'"$NEW_REPO" "$tmp" || {
    say "[Zero-E] Downloaded script does not reference the expected repository path."
    exit 1
  }

  chmod 0755 "$tmp"
  mv "$tmp" "$target"

  # If a 'zeroe' shim exists on PATH, refresh it too (best effort)
  if command -v zeroe >/dev/null 2>&1; then
    local pathbin; pathbin="$(command -v zeroe)"
    if cp "$target" "$pathbin" 2>/dev/null || sudo cp "$target" "$pathbin"; then
      chmod 0755 "$pathbin" 2>/dev/null || sudo chmod 0755 "$pathbin" || true
    fi
  fi

  # Hand off to the real script with original args
  exec "$target" "$@"
}

main() {
  migration_notice
  verify_new_repo_identity
  install_new_script "$@"
}

main "$@"
